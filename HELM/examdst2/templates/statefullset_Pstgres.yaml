apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-postgres-statefulset
  namespace: {{ .Values.global.namespace }}
spec:
  serviceName: "{{ .Release.Name }}-postgres"
  replicas: {{ .Values.postgres.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-postgres
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-postgres
    spec:
      containers:
      - name: postgres
        image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag | default .Chart.AppVersion }}"
        ports:
        - containerPort: {{ .Values.postgres.service.port }}
        env:
        - name: POSTGRES_USER
          value: "{{ .Values.postgres.env.user }}"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-postgres-secret"  # Assurez-vous que ce secret est défini ailleurs dans votre chart
              key: postgres-password
        - name: POSTGRES_DB
          value: "{{ .Values.postgres.env.dbname }}"  # Nom de votre base de données
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-storage
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "{{ .Values.postgres.storage.className }}"
      resources:
        requests:
          storage: "{{ .Values.postgres.storage.size }}"
